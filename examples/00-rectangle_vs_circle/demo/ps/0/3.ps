%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Tk Canvas Widget
%%For: Weili Nie
%%Title: Window .!canvas
%%CreationDate: Thu Aug  6 15:47:50 2020
%%BoundingBox: -84 5 698 788
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id$

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%EndSetup

%%Page: 1 1
save
306.0 396.0 translate
1.001 1.001 scale
5 -390 translate
-395 781 moveto 386 781 lineto 386 0 lineto -395 0 lineto closepath clip newpath
gsave
grestore
gsave
grestore
gsave
grestore
gsave
65.4573283422563 408.837941116833 moveto
80.1258943441932 416.714297093059 lineto
91.6426017746404 428.737992946618 lineto
98.8801150686865 443.732065553349 lineto
101.12997599839 460.228790616658 lineto
98.1719525002492 476.613353747906 lineto
1 setlinecap
1 setlinejoin
8 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
107.246029452721 474.890395982718 moveto
95.1280797545677 485.337598053753 lineto
92.1391129058003 469.619620665521 lineto
107.246029452721 474.890395982718 lineto
1.000 1.000 1.000 setrgbcolor AdjustColor
eofill
107.246029452721 474.890395982718 moveto
95.1280797545677 485.337598053753 lineto
92.1391129058003 469.619620665521 lineto
107.246029452721 474.890395982718 lineto
1 setlinejoin 1 setlinecap
2.5 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
96.6813881381491 496.387561540905 moveto
81.4878912888688 501.402179122626 lineto
84.7414555307033 485.736833428252 lineto
96.6813881381491 496.387561540905 lineto
1.000 1.000 1.000 setrgbcolor AdjustColor
eofill
96.6813881381491 496.387561540905 moveto
81.4878912888688 501.402179122626 lineto
84.7414555307033 485.736833428252 lineto
96.6813881381491 496.387561540905 lineto
1 setlinejoin 1 setlinecap
2.5 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
78.6943231573657 512.205439607153 moveto
62.7383513228694 511.024042630367 lineto
71.7391209931198 497.796235505106 lineto
78.6943231573657 512.205439607153 lineto
1.000 1.000 1.000 setrgbcolor AdjustColor
eofill
78.6943231573657 512.205439607153 moveto
62.7383513228694 511.024042630367 lineto
71.7391209931198 497.796235505106 lineto
78.6943231573657 512.205439607153 lineto
1 setlinejoin 1 setlinecap
2.5 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
56.0232021005449 519.9359016353 moveto
41.7339073513898 512.73834708033 lineto
55.1115968599407 503.961892248633 lineto
56.0232021005449 519.9359016353 lineto
1.000 1.000 1.000 setrgbcolor AdjustColor
eofill
56.0232021005449 519.9359016353 moveto
41.7339073513898 512.73834708033 lineto
55.1115968599407 503.961892248633 lineto
56.0232021005449 519.9359016353 lineto
1 setlinejoin 1 setlinecap
2.5 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
32.1194976343635 518.402054858371 moveto
21.672295563329 506.284105160218 lineto
37.3902729515609 503.29513831145 lineto
32.1194976343635 518.402054858371 lineto
1.000 1.000 1.000 setrgbcolor AdjustColor
eofill
32.1194976343635 518.402054858371 moveto
21.672295563329 506.284105160218 lineto
37.3902729515609 503.29513831145 lineto
32.1194976343635 518.402054858371 lineto
1 setlinejoin 1 setlinecap
2.5 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
32.1194976343635 518.402054858371 moveto
21.6722955633289 506.284105160218 lineto
37.3902729515609 503.29513831145 lineto
32.1194976343635 518.402054858371 lineto
1.000 1.000 1.000 setrgbcolor AdjustColor
eofill
32.1194976343635 518.402054858371 moveto
21.6722955633289 506.284105160218 lineto
37.3902729515609 503.29513831145 lineto
32.1194976343635 518.402054858371 lineto
1 setlinejoin 1 setlinecap
2.5 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
30.3965398691756 509.327977905899 moveto
23.6637532166089 514.267591669462 lineto
22.7523155387635 505.967020508297 lineto
23.1505945803016 497.626062886583 lineto
15.7279738672386 501.451621929673 lineto
7.79828864990068 504.068928292347 lineto
9.49647745900743 495.892966268781 lineto
12.452760991237 488.083319162847 lineto
4.21126643679144 489.427926076114 lineto
-4.13910450687905 489.466724855274 lineto
0.0024802365673473 482.215692097452 lineto
5.22738662971519 475.701818179037 lineto
-3.02624685725477 474.433853469383 lineto
-10.9799110388359 471.890346770199 lineto
-4.80033753185607 466.274024885371 lineto
2.18174148038528 461.693547518439 lineto
-5.27610778695849 457.937128406074 lineto
-12.0545051399202 453.060292385915 lineto
-4.44184257989046 449.628446091384 lineto
3.61395451072122 447.429734314672 lineto
-2.31808428881748 441.552565274826 lineto
-7.25769805238045 434.819778622259 lineto
1.04287310878458 433.908340944414 lineto
9.38383073049878 434.306619985952 lineto
5.55827168740864 426.883999272889 lineto
2.94096532473476 418.954314055551 lineto
11.1169273483003 420.652502864658 lineto
18.9265744542346 423.608786396887 lineto
17.5819675409679 415.367291842442 lineto
17.5431687618073 407.016920898771 lineto
24.7942015196297 411.158505642217 lineto
31.3080754380444 416.383412035365 lineto
32.5760401476988 408.129778548395 lineto
35.1195468468828 400.176114366814 lineto
40.7358687317104 406.355687873794 lineto
45.3163460986428 413.337766886035 lineto
49.0727652110078 405.879917618692 lineto
53.949601231167 399.10152026573 lineto
57.3814475256975 406.71418282576 lineto
59.5801593024098 414.769979916371 lineto
65.4573283422561 408.837941116833 lineto
1 setlinecap
1 setlinejoin
8 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
restore showpage

%%Trailer
end
%%EOF
